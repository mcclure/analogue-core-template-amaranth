/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post77, git sha1 e02b7f64b) */

module amaranth_core(audio_dac, audio_lrck, audio_mclk, clk, cont1_joy, cont1_key, cont1_trig, cont2_joy, cont2_key, cont2_trig, cont3_joy, cont3_key, cont3_trig, cont4_joy, cont4_key, cont4_trig, dbg_rx, dbg_tx, init_done, rst, user1
, user2, video_de, video_hs, video_rgb, video_rgb_clk, video_rgb_clk90, video_skip, video_vs, audio_adc);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire \$17 ;
  wire \$19 ;
  wire \$21 ;
  wire \$23 ;
  wire \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire [23:0] \$31 ;
  wire \$33 ;
  wire \$34 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire [10:0] \$51 ;
  wire [10:0] \$52 ;
  wire \$54 ;
  wire \$56 ;
  wire [10:0] \$58 ;
  wire [10:0] \$59 ;
  wire \$61 ;
  wire [22:0] \$63 ;
  wire [22:0] \$64 ;
  wire [23:0] \$66 ;
  wire [22:0] \$67 ;
  wire [23:0] \$69 ;
  wire \$7 ;
  wire \$71 ;
  wire \$73 ;
  wire \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire [2:0] \$87 ;
  wire [2:0] \$88 ;
  wire \$9 ;
  wire \$90 ;
  wire \$92 ;
  wire [8:0] \$94 ;
  wire [8:0] \$95 ;
  wire \$97 ;
  reg [399:0] active_state = 400'h0000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000;
  reg [399:0] \active_state$next ;
  reg [21:0] audgen_accum = 22'h0b5464;
  reg [21:0] \audgen_accum$next ;
  reg audgen_bit_update_stb;
  wire [3:0] audgen_channel_internal;
  wire audgen_channel_select;
  reg audgen_dac = 1'h0;
  reg \audgen_dac$next ;
  wire audgen_lrck;
  reg [7:0] audgen_lrck_count = 8'h00;
  reg [7:0] \audgen_lrck_count$next ;
  wire [4:0] audgen_lrck_internal;
  reg audgen_mclk = 1'h0;
  reg \audgen_mclk$next ;
  wire audgen_mclk_stb;
  wire audgen_silenced;
  wire audgen_slck;
  reg [1:0] audgen_slck_count = 2'h3;
  reg [1:0] \audgen_slck_count$next ;
  reg audgen_slck_update = 1'h1;
  reg \audgen_slck_update$next ;
  reg [399:0] audgen_state = 400'h0000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000;
  reg [399:0] \audgen_state$next ;
  reg audgen_word_update_stb;
  input audio_adc;
  wire audio_adc;
  output audio_dac;
  wire audio_dac;
  wire audio_high;
  output audio_lrck;
  wire audio_lrck;
  output audio_mclk;
  wire audio_mclk;
  wire audio_output_word_bit;
  wire boot_clk;
  input clk;
  wire clk;
  wire \clk$1 ;
  input [31:0] cont1_joy;
  wire [31:0] cont1_joy;
  input [31:0] cont1_key;
  wire [31:0] cont1_key;
  input [15:0] cont1_trig;
  wire [15:0] cont1_trig;
  input [31:0] cont2_joy;
  wire [31:0] cont2_joy;
  input [31:0] cont2_key;
  wire [31:0] cont2_key;
  input [15:0] cont2_trig;
  wire [15:0] cont2_trig;
  input [31:0] cont3_joy;
  wire [31:0] cont3_joy;
  input [31:0] cont3_key;
  wire [31:0] cont3_key;
  input [15:0] cont3_trig;
  wire [15:0] cont3_trig;
  input [31:0] cont4_joy;
  wire [31:0] cont4_joy;
  input [31:0] cont4_key;
  wire [31:0] cont4_key;
  input [15:0] cont4_trig;
  wire [15:0] cont4_trig;
  input dbg_rx;
  wire dbg_rx;
  input dbg_tx;
  wire dbg_tx;
  reg flash_color;
  output init_done;
  reg init_done = 1'h0;
  wire \init_done$next ;
  reg need_topline_backcopy = 1'h0;
  reg \need_topline_backcopy$next ;
  input rst;
  wire rst;
  wire \rst$2 ;
  reg [399:0] topline_state = 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  reg [399:0] \topline_state$next ;
  input user1;
  wire user1;
  input user2;
  wire user2;
  wire video_active;
  wire video_clk_div_clk;
  wire video_clk_div_clk90;
  wire video_clk_div_stb;
  output video_de;
  reg video_de = 1'h0;
  reg \video_de$next ;
  output video_hs;
  reg video_hs = 1'h0;
  reg \video_hs$next ;
  wire video_hsync_stb;
  output [23:0] video_rgb;
  reg [23:0] video_rgb = 24'h000000;
  reg [23:0] \video_rgb$next ;
  output video_rgb_clk;
  wire video_rgb_clk;
  output video_rgb_clk90;
  wire video_rgb_clk90;
  input video_skip;
  wire video_skip;
  output video_vs;
  reg video_vs = 1'h0;
  reg \video_vs$next ;
  wire video_vsync_stb;
  reg [9:0] video_x_count = 10'h000;
  reg [9:0] \video_x_count$next ;
  reg [9:0] video_y_count = 10'h000;
  reg [9:0] \video_y_count$next ;
  assign \$9  = video_clk_div_stb & \$7 ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) need_topline_backcopy <= 1'h0;
    else need_topline_backcopy <= \need_topline_backcopy$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_rgb <= 24'h000000;
    else video_rgb <= \video_rgb$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) active_state <= 400'h0000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000;
    else active_state <= \active_state$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_state <= 400'h0000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000;
    else audgen_state <= \audgen_state$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) topline_state <= 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else topline_state <= \topline_state$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_dac <= 1'h0;
    else audgen_dac <= \audgen_dac$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_vs <= 1'h0;
    else video_vs <= \video_vs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_hs <= 1'h0;
    else video_hs <= \video_hs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_x_count <= 10'h000;
    else video_x_count <= \video_x_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_y_count <= 10'h000;
    else video_y_count <= \video_y_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_de <= 1'h0;
    else video_de <= \video_de$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_accum <= 22'h0b5464;
    else audgen_accum <= \audgen_accum$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_mclk <= 1'h0;
    else audgen_mclk <= \audgen_mclk$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_slck_update <= 1'h1;
    else audgen_slck_update <= \audgen_slck_update$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_slck_count <= 2'h3;
    else audgen_slck_count <= \audgen_slck_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_lrck_count <= 8'h00;
    else audgen_lrck_count <= \audgen_lrck_count$next ;
  assign \$11  = video_y_count == 9'h17a;
  assign \$13  = \$9  & \$11 ;
  assign \$15  = video_x_count >= 3'h4;
  assign \$17  = video_x_count < 9'h194;
  assign \$19  = \$15  & \$17 ;
  assign \$21  = video_y_count >= 5'h1d;
  assign \$23  = \$19  & \$21 ;
  assign \$25  = video_y_count < 9'h15d;
  assign \$27  = \$23  & \$25 ;
  assign \$29  = video_y_count == 5'h1d;
  assign \$31  = + flash_color;
  assign \$34  = video_clk_div_stb & video_vsync_stb;
  assign \$33  = ~ \$34 ;
  assign \$37  = audgen_channel_internal <= 3'h5;
  assign \$3  = video_x_count == 9'h198;
  assign \$39  = audio_output_word_bit ^ audio_high;
  assign \$41  = audgen_silenced ? 1'h0 : \$39 ;
  assign \$43  = ! video_x_count;
  assign \$45  = ! video_y_count;
  assign \$47  = \$43  & \$45 ;
  assign \$49  = video_x_count == 2'h3;
  assign \$52  = video_x_count + 1'h1;
  assign \$54  = video_x_count == 9'h197;
  assign \$56  = video_x_count == 9'h197;
  assign \$5  = video_clk_div_stb & \$3 ;
  assign \$59  = video_y_count + 1'h1;
  assign \$61  = video_y_count == 9'h17a;
  assign \$64  = audgen_accum + 22'h03c000;
  assign \$67  = audgen_accum - 22'h0b5464;
  assign \$69  = $signed(\$67 ) + $signed(23'h03c000);
  assign \$71  = audgen_accum >= 22'h0b5464;
  assign \$73  = ~ audgen_mclk;
  assign \$75  = ~ audgen_slck_count[1];
  assign \$77  = ~ audgen_mclk;
  assign \$7  = video_x_count == 9'h199;
  assign \$79  = audgen_mclk_stb & \$77 ;
  assign \$81  = audgen_slck_count == 2'h2;
  assign \$83  = ~ audgen_mclk;
  assign \$85  = audgen_mclk_stb & \$83 ;
  assign \$88  = audgen_slck_count + 1'h1;
  assign \$90  = ~ audgen_mclk;
  assign \$92  = audgen_mclk_stb & \$90 ;
  assign \$95  = audgen_lrck_count + 1'h1;
  assign \$97  = audgen_lrck_internal == 5'h17;
  always @(posedge boot_clk)
    init_done <= 1'h1;
  \amaranth_core.video_clk_div  video_clk_div (
    .clk(\clk$1 ),
    .\clk$1 (video_clk_div_clk),
    .clk90(video_clk_div_clk90),
    .rst(\rst$2 ),
    .stb(video_clk_div_stb)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \need_topline_backcopy$next  = 1'h0;
    casez (video_clk_div_stb)
      1'h1:
          casez (video_hsync_stb)
            1'h1:
                casez (\$29 )
                  1'h1:
                      \need_topline_backcopy$next  = 1'h1;
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \need_topline_backcopy$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_rgb$next  = video_rgb;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \video_rgb$next  = 24'h000000;
          casez (video_active)
            1'h1:
                \video_rgb$next  = \$31 ;
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_rgb$next  = 24'h000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \active_state$next  = active_state;
    casez (video_clk_div_stb)
      1'h1:
        begin
          casez (video_active)
            1'h1:
                \active_state$next  = { active_state[0], active_state[399:1] };
          endcase
          casez (video_vsync_stb)
            1'h1:
                \active_state$next  = topline_state;
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \active_state$next  = 400'h0000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_state$next  = audgen_state;
    casez (video_clk_div_stb)
      1'h1:
          casez (video_vsync_stb)
            1'h1:
                \audgen_state$next  = topline_state;
          endcase
    endcase
    casez (audgen_word_update_stb)
      1'h1:
          casez (\$33 )
            1'h1:
                \audgen_state$next  = { audgen_state[0], audgen_state[399:1] };
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_state$next  = 400'h0000000000000000000000000000000000000000000000000100000000000000000000000010000000000000000000000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \topline_state$next  = topline_state;
    casez (need_topline_backcopy)
      1'h1:
          \topline_state$next  = active_state;
    endcase
    casez (\rst$2 )
      1'h1:
          \topline_state$next  = 400'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_dac$next  = audgen_dac;
    casez (audgen_bit_update_stb)
      1'h1:
          \audgen_dac$next  = \$41 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_dac$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_vs$next  = video_vs;
    casez (video_clk_div_stb)
      1'h1:
          \video_vs$next  = \$47 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_vs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_hs$next  = video_hs;
    casez (video_clk_div_stb)
      1'h1:
          \video_hs$next  = \$49 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_hs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_x_count$next  = video_x_count;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \video_x_count$next  = \$52 [9:0];
          casez (\$54 )
            1'h1:
                \video_x_count$next  = 10'h000;
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_x_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_y_count$next  = video_y_count;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$56 )
            1'h1:
              begin
                \video_y_count$next  = \$59 [9:0];
                casez (\$61 )
                  1'h1:
                      \video_y_count$next  = 10'h000;
                endcase
              end
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \video_y_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_de$next  = video_de;
    casez (video_clk_div_stb)
      1'h1:
          \video_de$next  = video_active;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_de$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_accum$next  = \$64 [21:0];
    casez (audgen_mclk_stb)
      1'h1:
          \audgen_accum$next  = \$69 [21:0];
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_accum$next  = 22'h0b5464;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_mclk$next  = audgen_mclk;
    casez (audgen_mclk_stb)
      1'h1:
          \audgen_mclk$next  = \$73 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_mclk$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_slck_update$next  = 1'h0;
    casez (\$79 )
      1'h1:
          casez (\$81 )
            1'h1:
                \audgen_slck_update$next  = 1'h1;
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_slck_update$next  = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_slck_count$next  = audgen_slck_count;
    casez (\$85 )
      1'h1:
          \audgen_slck_count$next  = \$88 [1:0];
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_slck_count$next  = 2'h3;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_lrck_count$next  = audgen_lrck_count;
    casez (\$92 )
      1'h1:
          \audgen_lrck_count$next  = \$95 [7:0];
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_lrck_count$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    audgen_word_update_stb = 1'h0;
    casez (audgen_slck_update)
      1'h1:
          casez (\$97 )
            1'h1:
                audgen_word_update_stb = 1'h1;
          endcase
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    audgen_bit_update_stb = 1'h0;
    casez (audgen_slck_update)
      1'h1:
          audgen_bit_update_stb = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (active_state[0])
      1'h1:
          flash_color = 1'h0;
      default:
          flash_color = 1'h1;
    endcase
  end
  assign \$51  = \$52 ;
  assign \$58  = \$59 ;
  assign \$63  = \$64 ;
  assign \$66  = \$69 ;
  assign \$87  = \$88 ;
  assign \$94  = \$95 ;
  assign audio_lrck = audgen_lrck;
  assign audio_dac = audgen_dac;
  assign audio_mclk = audgen_mclk;
  assign audgen_lrck_internal = audgen_lrck_count[6:2];
  assign audgen_silenced = audgen_lrck_count[6];
  assign audgen_channel_internal = audgen_lrck_count[5:2];
  assign audgen_channel_select = audgen_lrck;
  assign audgen_lrck = audgen_lrck_count[7];
  assign audgen_slck = \$75 ;
  assign audgen_mclk_stb = \$71 ;
  assign audio_high = audgen_state[0];
  assign audio_output_word_bit = \$37 ;
  assign video_active = \$27 ;
  assign video_vsync_stb = \$13 ;
  assign video_hsync_stb = \$5 ;
  assign video_rgb_clk90 = video_clk_div_clk90;
  assign video_rgb_clk = video_clk_div_clk;
  assign \init_done$next  = 1'h1;
  assign \rst$2  = rst;
  assign \clk$1  = clk;
  assign boot_clk = clk;
endmodule

module \amaranth_core.video_clk_div (rst, \clk$1 , clk90, stb, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$2  = 0;
  input clk;
  wire clk;
  output \clk$1 ;
  wire \clk$1 ;
  output clk90;
  wire clk90;
  reg [7:0] clk_reg = 8'hf0;
  reg [7:0] \clk_reg$next ;
  input rst;
  wire rst;
  output stb;
  wire stb;
  reg [7:0] stb_reg = 8'h01;
  reg [7:0] \stb_reg$next ;
  always @(posedge clk, posedge rst)
    if (rst) clk_reg <= 8'hf0;
    else clk_reg <= \clk_reg$next ;
  always @(posedge clk, posedge rst)
    if (rst) stb_reg <= 8'h01;
    else stb_reg <= \stb_reg$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \clk_reg$next  = { clk_reg[6:0], clk_reg[7] };
    casez (rst)
      1'h1:
          \clk_reg$next  = 8'hf0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \stb_reg$next  = { stb_reg[6:0], stb_reg[7] };
    casez (rst)
      1'h1:
          \stb_reg$next  = 8'h01;
    endcase
  end
  assign stb = stb_reg[0];
  assign clk90 = clk_reg[2];
  assign \clk$1  = clk_reg[0];
endmodule
