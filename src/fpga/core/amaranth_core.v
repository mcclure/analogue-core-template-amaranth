/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post97, git sha1 a1bb0255d) */

module amaranth_core(rst, user2, dbg_rx, audio_adc, cont1_key, cont2_key, cont3_key, cont4_key, cont1_joy, cont2_joy, cont3_joy, cont4_joy, cont1_trig, cont2_trig, cont3_trig, cont4_trig, init_done, user1, dbg_tx, video_rgb_clk, video_rgb_clk90
, video_rgb, video_de, video_skip, video_vs, video_hs, audio_mclk, audio_lrck, audio_dac, clk);
  reg \$auto$verilog_backend.cc:2352:dump_module$3  = 0;
  wire \$1 ;
  wire \$10 ;
  wire [2:0] \$11 ;
  wire \$12 ;
  wire [10:0] \$13 ;
  wire \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire [10:0] \$17 ;
  wire \$18 ;
  wire \$19 ;
  wire \$2 ;
  wire \$20 ;
  wire [10:0] \$21 ;
  wire \$22 ;
  wire \$23 ;
  wire \$24 ;
  wire [10:0] \$25 ;
  wire \$26 ;
  wire \$27 ;
  wire [10:0] \$28 ;
  wire [7:0] \$29 ;
  wire \$3 ;
  wire \$30 ;
  wire [2:0] \$31 ;
  wire \$32 ;
  wire \$33 ;
  wire \$34 ;
  wire \$35 ;
  wire [2:0] \$36 ;
  wire \$37 ;
  wire [6:0] \$38 ;
  wire \$39 ;
  wire \$4 ;
  wire [2:0] \$40 ;
  wire \$41 ;
  wire [2:0] \$42 ;
  wire [23:0] \$43 ;
  wire [23:0] \$44 ;
  wire \$45 ;
  wire \$46 ;
  wire \$47 ;
  wire [7:0] \$48 ;
  wire [5:0] \$49 ;
  wire \$5 ;
  wire \$50 ;
  wire \$51 ;
  wire \$52 ;
  wire \$53 ;
  wire \$54 ;
  wire [10:0] \$55 ;
  wire \$56 ;
  wire [10:0] \$57 ;
  wire \$58 ;
  wire [22:0] \$59 ;
  wire \$6 ;
  wire \$60 ;
  wire [22:0] \$61 ;
  wire [23:0] \$62 ;
  wire \$63 ;
  wire \$64 ;
  wire [2:0] \$65 ;
  wire \$66 ;
  wire \$67 ;
  wire \$68 ;
  wire [8:0] \$69 ;
  wire \$7 ;
  reg [5:0] \$70 ;
  reg [1:0] \$71 ;
  reg [1:0] \$72 ;
  reg [23:0] \$73 ;
  reg \$74 ;
  reg [6:0] \$75 ;
  reg [4:0] \$76 ;
  reg \$77 ;
  reg \$78 ;
  reg \$79 ;
  wire \$8 ;
  reg [9:0] \$80 ;
  reg [9:0] \$81 ;
  reg \$82 ;
  reg [21:0] \$83 ;
  reg \$84 ;
  reg \$85 ;
  reg [1:0] \$86 ;
  reg [7:0] \$87 ;
  wire \$9 ;
  wire [23:0] \$auto$rtlil.cc:2485:Not$2 ;
  reg [5:0] animation_counter = 6'h00;
  reg [21:0] audgen_accum = 22'h0b5464;
  reg audgen_bit_update_stb;
  wire [3:0] audgen_channel_internal;
  wire audgen_channel_select;
  (* init = 1'h0 *)
  wire audgen_dac;
  wire audgen_lrck;
  reg [7:0] audgen_lrck_count = 8'h00;
  wire [4:0] audgen_lrck_internal;
  (* init = 1'h0 *)
  wire audgen_mclk;
  wire audgen_mclk_stb;
  reg [6:0] audgen_osc_phase = 7'h00;
  reg [4:0] audgen_osc_wave = 5'h00;
  wire [3:0] audgen_osc_wave_select;
  wire audgen_silenced;
  wire audgen_slck;
  reg [1:0] audgen_slck_count = 2'h3;
  reg audgen_slck_update = 1'h1;
  reg audgen_word_update_stb;
  input audio_adc;
  wire audio_adc;
  output audio_dac;
  reg audio_dac = 1'h0;
  reg audio_high = 1'h0;
  output audio_lrck;
  wire audio_lrck;
  output audio_mclk;
  reg audio_mclk = 1'h0;
  wire audio_output_word_bit;
  wire boot_clk;
  input clk;
  wire clk;
  wire \clk$31 ;
  wire \clk$33 ;
  wire clk90;
  input [31:0] cont1_joy;
  wire [31:0] cont1_joy;
  input [31:0] cont1_key;
  wire [31:0] cont1_key;
  input [15:0] cont1_trig;
  wire [15:0] cont1_trig;
  input [31:0] cont2_joy;
  wire [31:0] cont2_joy;
  input [31:0] cont2_key;
  wire [31:0] cont2_key;
  input [15:0] cont2_trig;
  wire [15:0] cont2_trig;
  input [31:0] cont3_joy;
  wire [31:0] cont3_joy;
  input [31:0] cont3_key;
  wire [31:0] cont3_key;
  input [15:0] cont3_trig;
  wire [15:0] cont3_trig;
  input [31:0] cont4_joy;
  wire [31:0] cont4_joy;
  input [31:0] cont4_key;
  wire [31:0] cont4_key;
  input [15:0] cont4_trig;
  wire [15:0] cont4_trig;
  wire [1:0] current_color_id;
  reg current_flash_on;
  input dbg_rx;
  wire dbg_rx;
  output dbg_tx;
  wire dbg_tx;
  reg [23:0] flash_color;
  output init_done;
  reg init_done = 1'h0;
  (* init = 2'h0 *)
  wire [1:0] next_color_id;
  reg next_flash_on;
  reg [2:0] render_state;
  reg [1:0] rotate1_counter = 2'h0;
  reg [1:0] rotate2_counter = 2'h0;
  wire [1:0] rotate2_counter_anti;
  input rst;
  wire rst;
  wire \rst$32 ;
  wire stb;
  output user1;
  wire user1;
  input user2;
  wire user2;
  wire video_active;
  output video_de;
  reg video_de = 1'h0;
  output video_hs;
  reg video_hs = 1'h0;
  wire video_hsync_stb;
  output [23:0] video_rgb;
  reg [23:0] video_rgb = 24'h000000;
  wire [7:0] \video_rgb.b ;
  wire [7:0] \video_rgb.g ;
  wire [7:0] \video_rgb.r ;
  output video_rgb_clk;
  wire video_rgb_clk;
  output video_rgb_clk90;
  wire video_rgb_clk90;
  output video_skip;
  wire video_skip;
  output video_vs;
  reg video_vs = 1'h0;
  wire video_vsync_stb;
  reg [9:0] video_x_count = 10'h000;
  reg [9:0] video_y_count = 10'h000;
  assign video_active = \$9  & \$10 ;
  assign \$11  = 2'h3 - rotate2_counter;
  assign \$12  = video_y_count >= 5'h1d;
  assign \$13  = 5'h1d + \$11 [1:0];
  assign \$14  = video_y_count <= \$13 ;
  assign \$15  = \$12  & \$14 ;
  assign \$16  = video_y_count <= 9'h10c;
  assign \$17  = 9'h10c - \$11 [1:0];
  assign \$18  = $signed({ 1'h0, video_y_count }) >= $signed(\$17 );
  assign \$19  = \$16  & \$18 ;
  assign \$20  = video_x_count >= 3'h4;
  assign \$21  = 3'h4 + \$11 [1:0];
  assign \$22  = video_x_count <= \$21 ;
  assign \$23  = \$20  & \$22 ;
  assign \$24  = video_x_count <= 9'h143;
  assign \$25  = 9'h143 - \$11 [1:0];
  assign \$26  = $signed({ 1'h0, video_x_count }) >= $signed(\$25 );
  assign \$27  = \$24  & \$26 ;
  assign \$28  = video_y_count - 5'h1d;
  assign \$29  = animation_counter * 2'h3;
  assign \$30  = $signed(\$28 ) > $signed({ 1'h0, \$29  });
  assign \$31  = rotate1_counter + 1'h1;
  assign \$32  = rotate1_counter[0] ^ rotate2_counter[0];
  assign \$33  = video_x_count[0] ^ video_y_count[0];
  assign \$34  = video_x_count[0] ^ video_y_count[0];
  assign audio_output_word_bit = audgen_lrck_count[5:2] <= 3'h5;
  assign \$35  = rotate2_counter == 2'h3;
  assign \$36  = rotate1_counter + \$35 ;
  assign audgen_osc_wave_select = 3'h4 - \$36 ;
  assign audgen_mclk_stb = audgen_accum >= 20'hb5464;
  assign audgen_slck = ~ audgen_slck_count[1];
  assign \$37  = audgen_lrck_count[6:2] == 5'h17;
  assign \$38  = animation_counter + 1'h1;
  assign \$39  = animation_counter == 6'h3f;
  assign \$40  = rotate1_counter + 1'h1;
  assign \$41  = rotate1_counter == 2'h3;
  assign \$42  = rotate2_counter + 1'h1;
  assign \$45  = audio_output_word_bit ^ audio_high;
  assign \$46  = audgen_lrck_count[6] ? 1'h0 : \$45 ;
  assign \$47  = audgen_osc_phase < 6'h2e;
  assign \$48  = audgen_osc_phase + 1'h1;
  assign \$49  = audgen_osc_wave + 1'h1;
  assign \$50  = audgen_osc_wave >> audgen_osc_wave_select;
  assign \$51  = ! video_x_count;
  assign \$52  = ! video_y_count;
  assign \$53  = \$51  & \$52 ;
  assign \$54  = video_x_count == 2'h3;
  assign \$55  = video_x_count + 1'h1;
  assign \$56  = video_x_count == 9'h197;
  assign \$57  = video_y_count + 1'h1;
  assign \$58  = video_y_count == 9'h17a;
  assign \$59  = audgen_accum + 18'h3c000;
  assign \$60  = ~ audio_mclk;
  assign \$61  = audgen_accum - 20'hb5464;
  assign \$62  = $signed(\$61 ) + $signed(19'h3c000);
  assign \$63  = ~ audio_mclk;
  assign \$64  = audgen_mclk_stb & \$63 ;
  assign \$65  = audgen_slck_count + 1'h1;
  assign \$66  = audgen_slck_count == 2'h2;
  assign \$67  = ~ audio_mclk;
  assign \$68  = audgen_mclk_stb & \$67 ;
  assign \$69  = audgen_lrck_count + 1'h1;
  always @(posedge clk)
    init_done <= 1'h1;
  always @(posedge clk, posedge rst)
    if (rst) animation_counter <= 6'h00;
    else animation_counter <= \$70 ;
  always @(posedge clk, posedge rst)
    if (rst) rotate1_counter <= 2'h0;
    else rotate1_counter <= \$71 ;
  always @(posedge clk, posedge rst)
    if (rst) rotate2_counter <= 2'h0;
    else rotate2_counter <= \$72 ;
  always @(posedge clk, posedge rst)
    if (rst) video_rgb <= 24'h000000;
    else video_rgb <= \$73 ;
  always @(posedge clk, posedge rst)
    if (rst) audio_dac <= 1'h0;
    else audio_dac <= \$74 ;
  always @(posedge clk, posedge rst)
    if (rst) audgen_osc_phase <= 7'h00;
    else audgen_osc_phase <= \$75 ;
  always @(posedge clk, posedge rst)
    if (rst) audgen_osc_wave <= 5'h00;
    else audgen_osc_wave <= \$76 ;
  always @(posedge clk, posedge rst)
    if (rst) audio_high <= 1'h0;
    else audio_high <= \$77 ;
  always @(posedge clk, posedge rst)
    if (rst) video_vs <= 1'h0;
    else video_vs <= \$78 ;
  always @(posedge clk, posedge rst)
    if (rst) video_hs <= 1'h0;
    else video_hs <= \$79 ;
  always @(posedge clk, posedge rst)
    if (rst) video_x_count <= 10'h000;
    else video_x_count <= \$80 ;
  always @(posedge clk, posedge rst)
    if (rst) video_y_count <= 10'h000;
    else video_y_count <= \$81 ;
  always @(posedge clk, posedge rst)
    if (rst) video_de <= 1'h0;
    else video_de <= \$82 ;
  always @(posedge clk, posedge rst)
    if (rst) audgen_accum <= 22'h0b5464;
    else audgen_accum <= \$83 ;
  always @(posedge clk, posedge rst)
    if (rst) audio_mclk <= 1'h0;
    else audio_mclk <= \$84 ;
  always @(posedge clk, posedge rst)
    if (rst) audgen_slck_update <= 1'h1;
    else audgen_slck_update <= \$85 ;
  always @(posedge clk, posedge rst)
    if (rst) audgen_slck_count <= 2'h3;
    else audgen_slck_count <= \$86 ;
  always @(posedge clk, posedge rst)
    if (rst) audgen_lrck_count <= 8'h00;
    else audgen_lrck_count <= \$87 ;
  assign \$1  = video_x_count == 9'h197;
  assign video_hsync_stb = stb & \$1 ;
  assign \$2  = video_x_count == 9'h197;
  assign \$3  = stb & \$2 ;
  assign \$4  = video_y_count == 9'h17a;
  assign video_vsync_stb = \$3  & \$4 ;
  assign \$5  = video_x_count >= 3'h4;
  assign \$6  = video_x_count < 9'h144;
  assign \$7  = \$5  & \$6 ;
  assign \$8  = video_y_count >= 5'h1d;
  assign \$9  = \$7  & \$8 ;
  assign \$10  = video_y_count < 9'h10d;
  assign \$auto$rtlil.cc:2485:Not$2  = ~ flash_color;
  \amaranth_core.video_clk_div  video_clk_div (
    .clk(clk),
    .\clk$4 (video_rgb_clk),
    .clk90(video_rgb_clk90),
    .rst(rst),
    .stb(stb)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$15 ) begin
      render_state = 3'h0;
    end else if (\$19 ) begin
      render_state = 3'h2;
    end else if (\$23 ) begin
      render_state = 3'h1;
    end else if (\$27 ) begin
      render_state = 3'h3;
    end else if (\$30 ) begin
      render_state = 3'h5;
    end else begin
      render_state = 3'h4;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    if (\$32 ) begin
      flash_color = 24'h000000;
    end else begin
      flash_color = 24'hffffff;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    casez (\$31 [1:0])
      2'h0:
          current_flash_on = 1'h0;
      2'h1:
          current_flash_on = video_x_count[0];
      2'h2:
          current_flash_on = video_y_count[0];
      2'h3:
          current_flash_on = \$33 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    (* full_case = 32'd1 *)
    casez (rotate1_counter)
      2'h0:
          next_flash_on = 1'h0;
      2'h1:
          next_flash_on = video_x_count[0];
      2'h2:
          next_flash_on = video_y_count[0];
      2'h3:
          next_flash_on = \$34 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    audgen_word_update_stb = 1'h0;
    if (audgen_slck_update) begin
      if (\$37 ) begin
        audgen_word_update_stb = 1'h1;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    audgen_bit_update_stb = 1'h0;
    if (audgen_slck_update) begin
      audgen_bit_update_stb = 1'h1;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$70  = animation_counter;
    if (video_vsync_stb) begin
      \$70  = \$38 [5:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$71  = rotate1_counter;
    if (video_vsync_stb) begin
      if (\$39 ) begin
        \$71  = \$40 [1:0];
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$72  = rotate2_counter;
    if (video_vsync_stb) begin
      if (\$39 ) begin
        if (\$41 ) begin
          \$72  = \$42 [1:0];
        end
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$73  = video_rgb;
    if (stb) begin
      \$73  = 24'h000000;
      if (video_active) begin
        casez (render_state)
          3'h0:
            begin
              \$73 [23:16] = 8'hff;
              \$73 [15:8] = 8'h00;
              \$73 [7:0] = 8'h00;
            end
          3'h2:
            begin
              \$73 [23:16] = 8'hff;
              \$73 [15:8] = 8'hff;
              \$73 [7:0] = 8'h80;
            end
          3'h1:
            begin
              \$73 [23:16] = 8'h00;
              \$73 [15:8] = 8'hff;
              \$73 [7:0] = 8'h00;
            end
          3'h3:
            begin
              \$73 [23:16] = 8'h00;
              \$73 [15:8] = 8'h00;
              \$73 [7:0] = 8'hff;
            end
          3'h4:
              (* full_case = 32'd1 *)
              if (current_flash_on) begin
                \$73  = \$43 ;
              end else begin
                \$73 [23:16] = 8'ha0;
                \$73 [15:8] = 8'h00;
                \$73 [7:0] = 8'h80;
              end
          3'h5:
              (* full_case = 32'd1 *)
              if (next_flash_on) begin
                \$73  = \$44 ;
              end else begin
                \$73 [23:16] = 8'ha0;
                \$73 [15:8] = 8'h00;
                \$73 [7:0] = 8'h80;
              end
        endcase
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$74  = audio_dac;
    if (audgen_bit_update_stb) begin
      \$74  = \$46 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$75  = audgen_osc_phase;
    if (audgen_word_update_stb) begin
      (* full_case = 32'd1 *)
      if (\$47 ) begin
        \$75  = \$48 [6:0];
      end else begin
        \$75  = 7'h01;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$76  = audgen_osc_wave;
    if (audgen_word_update_stb) begin
      (* full_case = 32'd1 *)
      if (\$47 ) begin
      end else begin
        \$76  = \$49 [4:0];
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$77  = audio_high;
    if (audgen_word_update_stb) begin
      (* full_case = 32'd1 *)
      if (\$47 ) begin
      end else begin
        \$77  = \$50 ;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$78  = video_vs;
    if (stb) begin
      \$78  = \$53 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$79  = video_hs;
    if (stb) begin
      \$79  = \$54 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$80  = video_x_count;
    if (stb) begin
      \$80  = \$55 [9:0];
      if (\$56 ) begin
        \$80  = 10'h000;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$81  = video_y_count;
    if (stb) begin
      if (\$56 ) begin
        \$81  = \$57 [9:0];
        if (\$58 ) begin
          \$81  = 10'h000;
        end
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$82  = video_de;
    if (stb) begin
      \$82  = video_active;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$83  = \$59 [21:0];
    if (audgen_mclk_stb) begin
      \$83  = \$62 [21:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$84  = audio_mclk;
    if (audgen_mclk_stb) begin
      \$84  = \$60 ;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$85  = 1'h0;
    if (\$64 ) begin
      if (\$66 ) begin
        \$85  = 1'h1;
      end
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$86  = audgen_slck_count;
    if (\$64 ) begin
      \$86  = \$65 [1:0];
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$3 ) begin end
    \$87  = audgen_lrck_count;
    if (\$68 ) begin
      \$87  = \$69 [7:0];
    end
  end
  assign boot_clk = clk;
  assign \clk$31  = clk;
  assign \rst$32  = rst;
  assign \clk$33  = video_rgb_clk;
  assign clk90 = video_rgb_clk90;
  assign rotate2_counter_anti = \$11 [1:0];
  assign current_color_id = \$31 [1:0];
  assign next_color_id = rotate1_counter;
  assign audgen_channel_internal = audgen_lrck_count[5:2];
  assign audgen_lrck = audgen_lrck_count[7];
  assign audgen_channel_select = audgen_lrck_count[7];
  assign audgen_silenced = audgen_lrck_count[6];
  assign audgen_lrck_internal = audgen_lrck_count[6:2];
  assign audgen_mclk = audio_mclk;
  assign audgen_dac = audio_dac;
  assign user1 = 1'h0;
  assign dbg_tx = 1'h0;
  assign video_skip = 1'h0;
  assign audio_lrck = audgen_lrck_count[7];
  assign \video_rgb.b  = video_rgb[7:0];
  assign \video_rgb.g  = video_rgb[15:8];
  assign \video_rgb.r  = video_rgb[23:16];
  assign \$43  = flash_color;
  assign \$44  = \$auto$rtlil.cc:2485:Not$2 ;
endmodule

module \amaranth_core.video_clk_div (rst, \clk$4 , clk90, stb, clk);
  input clk;
  wire clk;
  output \clk$4 ;
  wire \clk$4 ;
  output clk90;
  wire clk90;
  reg [7:0] clk_reg = 8'hf0;
  input rst;
  wire rst;
  output stb;
  wire stb;
  reg [7:0] stb_reg = 8'h01;
  always @(posedge clk, posedge rst)
    if (rst) clk_reg <= 8'hf0;
    else clk_reg <= { clk_reg[6:0], clk_reg[7] };
  always @(posedge clk, posedge rst)
    if (rst) stb_reg <= 8'h01;
    else stb_reg <= { stb_reg[6:0], stb_reg[7] };
  assign \clk$4  = clk_reg[0];
  assign clk90 = clk_reg[2];
  assign stb = stb_reg[0];
endmodule
