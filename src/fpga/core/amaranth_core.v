/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post75, git sha1 e02b7f64b) */

module amaranth_core(audio_clk, audio_dac, audio_sync, clk, cont1_joy, cont1_key, cont1_trig, cont2_joy, cont2_key, cont2_trig, cont3_joy, cont3_key, cont3_trig, cont4_joy, cont4_key, cont4_trig, dbg_rx, dbg_tx, init_done, rst, user1
, user2, video_de, video_hs, video_rgb, video_rgb_clk, video_rgb_clk90, video_skip, video_vs, audio_adc);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire \$11 ;
  wire \$13 ;
  wire \$15 ;
  wire [10:0] \$17 ;
  wire [10:0] \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire [10:0] \$24 ;
  wire [10:0] \$25 ;
  wire \$27 ;
  wire \$29 ;
  wire \$3 ;
  wire \$31 ;
  wire \$33 ;
  wire \$35 ;
  wire \$37 ;
  wire \$39 ;
  wire \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire \$47 ;
  wire \$49 ;
  wire \$5 ;
  wire \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$7 ;
  wire \$9 ;
  input audio_adc;
  wire audio_adc;
  input audio_clk;
  wire audio_clk;
  input audio_dac;
  wire audio_dac;
  input audio_sync;
  wire audio_sync;
  wire boot_clk;
  input clk;
  wire clk;
  wire \clk$1 ;
  input [31:0] cont1_joy;
  wire [31:0] cont1_joy;
  input [31:0] cont1_key;
  wire [31:0] cont1_key;
  input [15:0] cont1_trig;
  wire [15:0] cont1_trig;
  input [31:0] cont2_joy;
  wire [31:0] cont2_joy;
  input [31:0] cont2_key;
  wire [31:0] cont2_key;
  input [15:0] cont2_trig;
  wire [15:0] cont2_trig;
  input [31:0] cont3_joy;
  wire [31:0] cont3_joy;
  input [31:0] cont3_key;
  wire [31:0] cont3_key;
  input [15:0] cont3_trig;
  wire [15:0] cont3_trig;
  input [31:0] cont4_joy;
  wire [31:0] cont4_joy;
  input [31:0] cont4_key;
  wire [31:0] cont4_key;
  input [15:0] cont4_trig;
  wire [15:0] cont4_trig;
  input dbg_rx;
  wire dbg_rx;
  input dbg_tx;
  wire dbg_tx;
  output init_done;
  reg init_done = 1'h0;
  wire \init_done$next ;
  input rst;
  wire rst;
  wire \rst$2 ;
  input user1;
  wire user1;
  input user2;
  wire user2;
  output video_de;
  reg video_de = 1'h0;
  reg \video_de$next ;
  output video_hs;
  reg video_hs = 1'h0;
  reg \video_hs$next ;
  output [23:0] video_rgb;
  reg [23:0] video_rgb = 24'h000000;
  reg [23:0] \video_rgb$next ;
  output video_rgb_clk;
  wire video_rgb_clk;
  output video_rgb_clk90;
  wire video_rgb_clk90;
  reg [3:0] video_rgb_r = 4'hc;
  reg [3:0] \video_rgb_r$next ;
  input video_skip;
  wire video_skip;
  wire video_stb;
  output video_vs;
  reg video_vs = 1'h0;
  reg \video_vs$next ;
  reg [9:0] x_count = 10'h000;
  reg [9:0] \x_count$next ;
  reg [9:0] y_count = 10'h000;
  reg [9:0] \y_count$next ;
  assign \$9  = ! x_count;
  assign \$11  = ! y_count;
  assign \$13  = \$9  & \$11 ;
  assign \$15  = x_count == 2'h3;
  assign \$18  = x_count + 1'h1;
  assign \$20  = x_count == 10'h338;
  assign \$22  = x_count == 10'h338;
  assign \$25  = y_count + 1'h1;
  assign \$27  = y_count == 9'h1da;
  assign \$29  = x_count >= 4'ha;
  assign \$31  = x_count < 10'h32a;
  assign \$33  = \$29  & \$31 ;
  assign \$35  = y_count >= 4'ha;
  assign \$37  = y_count < 9'h1cc;
  assign \$3  = ~ video_rgb_clk;
  assign \$39  = \$35  & \$37 ;
  assign \$41  = x_count >= 4'ha;
  assign \$43  = x_count < 10'h32a;
  assign \$45  = \$41  & \$43 ;
  assign \$47  = y_count >= 4'ha;
  assign \$49  = y_count < 9'h1cc;
  assign \$51  = \$47  & \$49 ;
  assign \$53  = y_count == 4'ha;
  assign \$55  = y_count == 9'h1cb;
  assign \$57  = x_count == 4'ha;
  assign \$5  = ~ video_rgb_clk90;
  assign \$59  = x_count == 10'h329;
  assign \$61  = x_count[0] ^ y_count[0];
  always @(posedge boot_clk)
    init_done <= 1'h1;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_rgb_r <= 4'hc;
    else video_rgb_r <= \video_rgb_r$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_vs <= 1'h0;
    else video_vs <= \video_vs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_hs <= 1'h0;
    else video_hs <= \video_hs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) x_count <= 10'h000;
    else x_count <= \x_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) y_count <= 10'h000;
    else y_count <= \y_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_de <= 1'h0;
    else video_de <= \video_de$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_rgb <= 24'h000000;
    else video_rgb <= \video_rgb$next ;
  assign \$7  = \$3  & \$5 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \x_count$next  = x_count;
    casez (video_stb)
      1'h1:
        begin
          \x_count$next  = \$18 [9:0];
          casez (\$20 )
            1'h1:
                \x_count$next  = 10'h000;
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \x_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \y_count$next  = y_count;
    casez (video_stb)
      1'h1:
          casez (\$22 )
            1'h1:
              begin
                \y_count$next  = \$25 [9:0];
                casez (\$27 )
                  1'h1:
                      \y_count$next  = 10'h000;
                endcase
              end
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \y_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_de$next  = video_de;
    casez (video_stb)
      1'h1:
        begin
          \video_de$next  = 1'h0;
          casez (\$33 )
            1'h1:
                casez (\$39 )
                  1'h1:
                      \video_de$next  = 1'h1;
                endcase
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_de$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_rgb$next  = video_rgb;
    casez (video_stb)
      1'h1:
        begin
          \video_rgb$next  = 24'h000000;
          casez (\$45 )
            1'h1:
                casez (\$51 )
                  1'h1:
                      (* full_case = 32'd1 *)
                      casez ({ \$61 , \$59 , \$57 , \$55 , \$53  })
                        5'b????1:
                          begin
                            \video_rgb$next [23:16] = 8'hff;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'h00;
                          end
                        5'b???1?:
                          begin
                            \video_rgb$next [23:16] = 8'hff;
                            \video_rgb$next [15:8] = 8'hff;
                            \video_rgb$next [7:0] = 8'h80;
                          end
                        5'b??1??:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'hff;
                            \video_rgb$next [7:0] = 8'h00;
                          end
                        5'b?1???:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'hff;
                          end
                        5'h1?:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'h00;
                          end
                        default:
                          begin
                            \video_rgb$next [23:16] = 8'ha0;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'h80;
                          end
                      endcase
                endcase
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_rgb$next  = 24'h000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_rgb_r$next  = { video_rgb_r[2:0], video_rgb_r[3] };
    casez (\rst$2 )
      1'h1:
          \video_rgb_r$next  = 4'hc;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_vs$next  = video_vs;
    casez (video_stb)
      1'h1:
          \video_vs$next  = \$13 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_vs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_hs$next  = video_hs;
    casez (video_stb)
      1'h1:
          \video_hs$next  = \$15 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_hs$next  = 1'h0;
    endcase
  end
  assign \$17  = \$18 ;
  assign \$24  = \$25 ;
  assign video_stb = \$7 ;
  assign video_rgb_clk90 = video_rgb_r[1];
  assign video_rgb_clk = video_rgb_r[0];
  assign \init_done$next  = 1'h1;
  assign \rst$2  = rst;
  assign \clk$1  = clk;
  assign boot_clk = clk;
endmodule
