/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post75, git sha1 e02b7f64b) */

module amaranth_core(audio_clk, audio_dac, audio_sync, clk, cont1_joy, cont1_key, cont1_trig, cont2_joy, cont2_key, cont2_trig, cont3_joy, cont3_key, cont3_trig, cont4_joy, cont4_key, cont4_trig, dbg_rx, dbg_tx, init_done, rst, user1
, user2, video_de, video_hs, video_rgb, video_rgb_clk, video_rgb_clk90, video_skip, video_vs, audio_adc);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire \$10 ;
  wire \$101 ;
  wire [2:0] \$103 ;
  wire [2:0] \$104 ;
  wire \$106 ;
  wire \$108 ;
  wire \$110 ;
  wire \$112 ;
  wire \$114 ;
  wire \$116 ;
  wire \$118 ;
  wire \$12 ;
  wire \$120 ;
  wire \$122 ;
  wire \$124 ;
  wire \$126 ;
  wire \$128 ;
  wire [23:0] \$130 ;
  wire [23:0] \$132 ;
  wire [22:0] \$134 ;
  wire [22:0] \$135 ;
  wire \$137 ;
  wire [23:0] \$139 ;
  wire \$14 ;
  wire [22:0] \$140 ;
  wire [23:0] \$142 ;
  wire \$144 ;
  wire \$146 ;
  wire \$148 ;
  wire \$149 ;
  wire [5:0] \$152 ;
  wire [5:0] \$153 ;
  wire \$155 ;
  wire \$157 ;
  wire \$159 ;
  wire [10:0] \$16 ;
  wire \$161 ;
  wire [8:0] \$163 ;
  wire [8:0] \$164 ;
  wire \$166 ;
  wire \$168 ;
  wire \$170 ;
  wire [10:0] \$18 ;
  wire \$20 ;
  wire \$22 ;
  wire \$24 ;
  wire [10:0] \$26 ;
  wire \$28 ;
  wire [2:0] \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire [10:0] \$34 ;
  wire [10:0] \$36 ;
  wire \$38 ;
  wire [2:0] \$4 ;
  wire \$40 ;
  wire [10:0] \$42 ;
  wire [10:0] \$44 ;
  wire [8:0] \$45 ;
  wire \$48 ;
  wire [2:0] \$50 ;
  wire [2:0] \$51 ;
  wire \$53 ;
  wire \$55 ;
  wire \$57 ;
  wire \$59 ;
  wire \$6 ;
  wire \$61 ;
  wire \$63 ;
  wire \$65 ;
  wire [10:0] \$67 ;
  wire [10:0] \$68 ;
  wire \$70 ;
  wire \$72 ;
  wire [10:0] \$74 ;
  wire [10:0] \$75 ;
  wire \$77 ;
  wire \$79 ;
  wire [10:0] \$8 ;
  wire \$81 ;
  wire [6:0] \$83 ;
  wire [6:0] \$84 ;
  wire \$86 ;
  wire \$88 ;
  wire \$90 ;
  wire [2:0] \$92 ;
  wire [2:0] \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  reg [5:0] animation_counter = 6'h00;
  reg [5:0] \animation_counter$next ;
  reg [21:0] audgen_accum = 22'h000000;
  reg [21:0] \audgen_accum$next ;
  reg audgen_dac = 1'h0;
  reg \audgen_dac$next ;
  reg audgen_high = 1'h0;
  reg \audgen_high$next ;
  reg audgen_lrck = 1'h0;
  reg \audgen_lrck$next ;
  reg [4:0] audgen_lrck_cnt = 5'h00;
  reg [4:0] \audgen_lrck_cnt$next ;
  reg audgen_mclk = 1'h0;
  reg \audgen_mclk$next ;
  reg [7:0] audgen_osc = 8'h00;
  reg [7:0] \audgen_osc$next ;
  wire audgen_sclk_stb;
  wire audgen_sclk_stb_update;
  input audio_adc;
  wire audio_adc;
  output audio_clk;
  wire audio_clk;
  output audio_dac;
  wire audio_dac;
  output audio_sync;
  wire audio_sync;
  wire boot_clk;
  input clk;
  wire clk;
  wire \clk$1 ;
  input [31:0] cont1_joy;
  wire [31:0] cont1_joy;
  input [31:0] cont1_key;
  wire [31:0] cont1_key;
  input [15:0] cont1_trig;
  wire [15:0] cont1_trig;
  input [31:0] cont2_joy;
  wire [31:0] cont2_joy;
  input [31:0] cont2_key;
  wire [31:0] cont2_key;
  input [15:0] cont2_trig;
  wire [15:0] cont2_trig;
  input [31:0] cont3_joy;
  wire [31:0] cont3_joy;
  input [31:0] cont3_key;
  wire [31:0] cont3_key;
  input [15:0] cont3_trig;
  wire [15:0] cont3_trig;
  input [31:0] cont4_joy;
  wire [31:0] cont4_joy;
  input [31:0] cont4_key;
  wire [31:0] cont4_key;
  input [15:0] cont4_trig;
  wire [15:0] cont4_trig;
  wire [1:0] current_color_id;
  reg current_flash_on;
  input dbg_rx;
  wire dbg_rx;
  input dbg_tx;
  wire dbg_tx;
  reg [23:0] flash_color;
  wire i2s_clk_div_stb;
  wire i2s_clk_div_stb_update;
  output init_done;
  reg init_done = 1'h0;
  wire \init_done$next ;
  wire [1:0] next_color_id;
  reg next_flash_on;
  reg [2:0] render_state;
  reg [1:0] rotate1_counter = 2'h0;
  reg [1:0] \rotate1_counter$next ;
  reg [1:0] rotate2_counter = 2'h0;
  reg [1:0] \rotate2_counter$next ;
  wire [1:0] rotate2_counter_anti;
  input rst;
  wire rst;
  wire \rst$2 ;
  input user1;
  wire user1;
  input user2;
  wire user2;
  wire video_clk_div_clk;
  wire video_clk_div_clk90;
  wire video_clk_div_stb;
  output video_de;
  reg video_de = 1'h0;
  reg \video_de$next ;
  output video_hs;
  reg video_hs = 1'h0;
  reg \video_hs$next ;
  output [23:0] video_rgb;
  reg [23:0] video_rgb = 24'h000000;
  reg [23:0] \video_rgb$next ;
  output video_rgb_clk;
  wire video_rgb_clk;
  output video_rgb_clk90;
  wire video_rgb_clk90;
  input video_skip;
  wire video_skip;
  output video_vs;
  reg video_vs = 1'h0;
  reg \video_vs$next ;
  reg [9:0] x_count = 10'h000;
  reg [9:0] \x_count$next ;
  reg [9:0] y_count = 10'h000;
  reg [9:0] \y_count$next ;
  assign \$99  = animation_counter == 6'h3f;
  assign \$101  = rotate1_counter == 2'h3;
  assign \$104  = rotate2_counter + 1'h1;
  assign \$106  = x_count >= 3'h4;
  assign \$108  = x_count < 9'h194;
  assign \$10  = y_count <= \$8 ;
  assign \$110  = \$106  & \$108 ;
  assign \$112  = y_count >= 5'h1d;
  assign \$114  = y_count < 9'h15d;
  assign \$116  = \$112  & \$114 ;
  assign \$118  = x_count >= 3'h4;
  assign \$120  = x_count < 9'h194;
  assign \$122  = \$118  & \$120 ;
  assign \$124  = y_count >= 5'h1d;
  assign \$126  = y_count < 9'h15d;
  assign \$128  = \$124  & \$126 ;
  assign \$12  = \$6  & \$10 ;
  assign \$130  = flash_color ^ 1'h0;
  assign \$132  = flash_color ^ 24'hffffff;
  assign \$135  = audgen_accum + 22'h03c000;
  assign \$137  = audgen_accum >= 22'h0b5464;
  assign \$140  = audgen_accum - 22'h0b5464;
  assign \$142  = $signed(\$140 ) + $signed(23'h03c000);
  assign \$144  = audgen_accum >= 22'h0b5464;
  assign \$146  = ~ audgen_mclk;
  assign \$14  = y_count <= 10'h15c;
  assign \$149  = audgen_lrck_cnt < 3'h4;
  assign \$148  = \$149  ? 1'h0 : audgen_high;
  assign \$153  = audgen_lrck_cnt + 1'h1;
  assign \$155  = audgen_lrck_cnt == 5'h1f;
  assign \$157  = ~ audgen_lrck;
  assign \$159  = audgen_lrck_cnt == 5'h1f;
  assign \$161  = audgen_osc < 7'h6d;
  assign \$164  = audgen_osc + 1'h1;
  assign \$166  = audgen_lrck_cnt == 5'h1f;
  assign \$168  = audgen_osc < 7'h6d;
  assign \$16  = + y_count;
  assign \$170  = ~ audgen_high;
  always @(posedge boot_clk)
    init_done <= 1'h1;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_vs <= 1'h0;
    else video_vs <= \video_vs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_hs <= 1'h0;
    else video_hs <= \video_hs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) x_count <= 10'h000;
    else x_count <= \x_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) y_count <= 10'h000;
    else y_count <= \y_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) animation_counter <= 6'h00;
    else animation_counter <= \animation_counter$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) rotate1_counter <= 2'h0;
    else rotate1_counter <= \rotate1_counter$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) rotate2_counter <= 2'h0;
    else rotate2_counter <= \rotate2_counter$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_de <= 1'h0;
    else video_de <= \video_de$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_rgb <= 24'h000000;
    else video_rgb <= \video_rgb$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_accum <= 22'h000000;
    else audgen_accum <= \audgen_accum$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_mclk <= 1'h0;
    else audgen_mclk <= \audgen_mclk$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_dac <= 1'h0;
    else audgen_dac <= \audgen_dac$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_lrck_cnt <= 5'h00;
    else audgen_lrck_cnt <= \audgen_lrck_cnt$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_lrck <= 1'h0;
    else audgen_lrck <= \audgen_lrck$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_osc <= 8'h00;
    else audgen_osc <= \audgen_osc$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) audgen_high <= 1'h0;
    else audgen_high <= \audgen_high$next ;
  assign \$18  = 10'h15c - rotate2_counter_anti;
  assign \$20  = $signed(\$16 ) >= $signed(\$18 );
  assign \$22  = \$14  & \$20 ;
  assign \$24  = x_count >= 10'h004;
  assign \$26  = 10'h004 + rotate2_counter_anti;
  assign \$28  = x_count <= \$26 ;
  assign \$30  = \$24  & \$28 ;
  assign \$32  = x_count <= 10'h193;
  assign \$34  = + x_count;
  assign \$36  = 10'h193 - rotate2_counter_anti;
  assign \$38  = $signed(\$34 ) >= $signed(\$36 );
  assign \$40  = \$32  & \$38 ;
  assign \$42  = y_count - 5'h1d;
  assign \$45  = animation_counter * 3'h5;
  assign \$44  = + \$45 ;
  assign \$48  = $signed(\$42 ) > $signed(\$44 );
  assign \$4  = 2'h3 - rotate2_counter;
  assign \$51  = rotate1_counter + 1'h1;
  assign \$53  = rotate1_counter[0] ^ rotate2_counter[0];
  assign \$55  = x_count[0] ^ y_count[0];
  assign \$57  = x_count[0] ^ y_count[0];
  assign \$59  = ! x_count;
  assign \$61  = ! y_count;
  assign \$63  = \$59  & \$61 ;
  assign \$65  = x_count == 2'h3;
  assign \$68  = x_count + 1'h1;
  assign \$6  = y_count >= 10'h01d;
  assign \$70  = x_count == 9'h197;
  assign \$72  = x_count == 9'h197;
  assign \$75  = y_count + 1'h1;
  assign \$77  = y_count == 9'h17a;
  assign \$79  = x_count == 9'h197;
  assign \$81  = y_count == 9'h17a;
  assign \$84  = animation_counter + 1'h1;
  assign \$86  = x_count == 9'h197;
  assign \$88  = y_count == 9'h17a;
  assign \$8  = 10'h01d + rotate2_counter_anti;
  assign \$90  = animation_counter == 6'h3f;
  assign \$93  = rotate1_counter + 1'h1;
  assign \$95  = x_count == 9'h197;
  assign \$97  = y_count == 9'h17a;
  \amaranth_core.i2s_clk_div  i2s_clk_div (
    .clk(\clk$1 ),
    .rst(\rst$2 ),
    .stb(i2s_clk_div_stb),
    .stb_update(i2s_clk_div_stb_update)
  );
  \amaranth_core.video_clk_div  video_clk_div (
    .clk(\clk$1 ),
    .\clk$1 (video_clk_div_clk),
    .clk90(video_clk_div_clk90),
    .rst(\rst$2 ),
    .stb(video_clk_div_stb)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (\$53 )
      1'h1:
          flash_color = 24'h000000;
      default:
          flash_color = 24'hffffff;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (current_color_id)
      2'h0:
          current_flash_on = 1'h0;
      2'h1:
          current_flash_on = x_count[0];
      2'h2:
          current_flash_on = y_count[0];
      2'h3:
          current_flash_on = \$55 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_color_id)
      2'h0:
          next_flash_on = 1'h0;
      2'h1:
          next_flash_on = x_count[0];
      2'h2:
          next_flash_on = y_count[0];
      2'h3:
          next_flash_on = \$57 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_vs$next  = video_vs;
    casez (video_clk_div_stb)
      1'h1:
          \video_vs$next  = \$63 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_vs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_hs$next  = video_hs;
    casez (video_clk_div_stb)
      1'h1:
          \video_hs$next  = \$65 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_hs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \x_count$next  = x_count;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \x_count$next  = \$68 [9:0];
          casez (\$70 )
            1'h1:
                \x_count$next  = 10'h000;
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \x_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \y_count$next  = y_count;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$72 )
            1'h1:
              begin
                \y_count$next  = \$75 [9:0];
                casez (\$77 )
                  1'h1:
                      \y_count$next  = 10'h000;
                endcase
              end
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \y_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \animation_counter$next  = animation_counter;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$79 )
            1'h1:
                casez (\$81 )
                  1'h1:
                      \animation_counter$next  = \$84 [5:0];
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \animation_counter$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \rotate1_counter$next  = rotate1_counter;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$86 )
            1'h1:
                casez (\$88 )
                  1'h1:
                      casez (\$90 )
                        1'h1:
                            \rotate1_counter$next  = \$93 [1:0];
                      endcase
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \rotate1_counter$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \rotate2_counter$next  = rotate2_counter;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$95 )
            1'h1:
                casez (\$97 )
                  1'h1:
                      casez (\$99 )
                        1'h1:
                            casez (\$101 )
                              1'h1:
                                  \rotate2_counter$next  = \$104 [1:0];
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \rotate2_counter$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_de$next  = video_de;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \video_de$next  = 1'h0;
          casez (\$110 )
            1'h1:
                casez (\$116 )
                  1'h1:
                      \video_de$next  = 1'h1;
                endcase
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_de$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_rgb$next  = video_rgb;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \video_rgb$next  = 24'h000000;
          casez (\$122 )
            1'h1:
                casez (\$128 )
                  1'h1:
                      casez (render_state)
                        3'h0:
                          begin
                            \video_rgb$next [23:16] = 8'hff;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'h00;
                          end
                        3'h2:
                          begin
                            \video_rgb$next [23:16] = 8'hff;
                            \video_rgb$next [15:8] = 8'hff;
                            \video_rgb$next [7:0] = 8'h80;
                          end
                        3'h1:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'hff;
                            \video_rgb$next [7:0] = 8'h00;
                          end
                        3'h3:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'hff;
                          end
                        3'h4:
                            (* full_case = 32'd1 *)
                            casez (current_flash_on)
                              1'h1:
                                  \video_rgb$next  = \$130 ;
                              default:
                                begin
                                  \video_rgb$next [23:16] = 8'ha0;
                                  \video_rgb$next [15:8] = 8'h00;
                                  \video_rgb$next [7:0] = 8'h80;
                                end
                            endcase
                        3'h5:
                            (* full_case = 32'd1 *)
                            casez (next_flash_on)
                              1'h1:
                                  \video_rgb$next  = \$132 ;
                              default:
                                begin
                                  \video_rgb$next [23:16] = 8'ha0;
                                  \video_rgb$next [15:8] = 8'h00;
                                  \video_rgb$next [7:0] = 8'h80;
                                end
                            endcase
                      endcase
                endcase
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_rgb$next  = 24'h000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_accum$next  = \$135 [21:0];
    casez (\$137 )
      1'h1:
          \audgen_accum$next  = \$142 [21:0];
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_accum$next  = 22'h000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_mclk$next  = audgen_mclk;
    casez (\$144 )
      1'h1:
          \audgen_mclk$next  = \$146 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_mclk$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_dac$next  = audgen_dac;
    casez (audgen_sclk_stb_update)
      1'h1:
          \audgen_dac$next  = \$148 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_dac$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_lrck_cnt$next  = \$153 [4:0];
    casez (\rst$2 )
      1'h1:
          \audgen_lrck_cnt$next  = 5'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_lrck$next  = audgen_lrck;
    casez (\$155 )
      1'h1:
          \audgen_lrck$next  = \$157 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_lrck$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_osc$next  = audgen_osc;
    casez (\$159 )
      1'h1:
          (* full_case = 32'd1 *)
          casez (\$161 )
            1'h1:
                \audgen_osc$next  = \$164 [7:0];
            default:
                \audgen_osc$next  = 8'h01;
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_osc$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \audgen_high$next  = audgen_high;
    casez (\$166 )
      1'h1:
          (* full_case = 32'd1 *)
          casez (\$168 )
            1'h1:
                /* empty */;
            default:
                \audgen_high$next  = \$170 ;
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \audgen_high$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$48 , \$40 , \$30 , \$22 , \$12  })
      5'b????1:
          render_state = 3'h0;
      5'b???1?:
          render_state = 3'h2;
      5'b??1??:
          render_state = 3'h1;
      5'b?1???:
          render_state = 3'h3;
      5'h1?:
          render_state = 3'h5;
      default:
          render_state = 3'h4;
    endcase
  end
  assign \$3  = \$4 ;
  assign \$50  = \$51 ;
  assign \$67  = \$68 ;
  assign \$74  = \$75 ;
  assign \$83  = \$84 ;
  assign \$92  = \$93 ;
  assign \$103  = \$104 ;
  assign \$134  = \$135 ;
  assign \$139  = \$142 ;
  assign \$152  = \$153 ;
  assign \$163  = \$164 ;
  assign audio_sync = audgen_lrck;
  assign audio_dac = audgen_dac;
  assign audio_clk = audgen_mclk;
  assign audgen_sclk_stb_update = i2s_clk_div_stb_update;
  assign audgen_sclk_stb = i2s_clk_div_stb;
  assign next_color_id = rotate1_counter;
  assign current_color_id = \$51 [1:0];
  assign rotate2_counter_anti = \$4 [1:0];
  assign video_rgb_clk90 = video_clk_div_clk90;
  assign video_rgb_clk = video_clk_div_clk;
  assign \init_done$next  = 1'h1;
  assign \rst$2  = rst;
  assign \clk$1  = clk;
  assign boot_clk = clk;
endmodule

module \amaranth_core.i2s_clk_div (rst, stb, stb_update, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$2  = 0;
  input clk;
  wire clk;
  input rst;
  wire rst;
  output stb;
  wire stb;
  reg [3:0] stb_reg = 4'h2;
  reg [3:0] \stb_reg$next ;
  reg [3:0] stb_reg_update = 4'h1;
  reg [3:0] \stb_reg_update$next ;
  output stb_update;
  wire stb_update;
  always @(posedge clk, posedge rst)
    if (rst) stb_reg_update <= 4'h1;
    else stb_reg_update <= \stb_reg_update$next ;
  always @(posedge clk, posedge rst)
    if (rst) stb_reg <= 4'h2;
    else stb_reg <= \stb_reg$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \stb_reg_update$next  = { stb_reg_update[0], stb_reg_update[3:1] };
    casez (rst)
      1'h1:
          \stb_reg_update$next  = 4'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \stb_reg$next  = { stb_reg[0], stb_reg[3:1] };
    casez (rst)
      1'h1:
          \stb_reg$next  = 4'h2;
    endcase
  end
  assign stb = stb_reg[0];
  assign stb_update = stb_reg_update[0];
endmodule

module \amaranth_core.video_clk_div (rst, \clk$1 , clk90, stb, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$3  = 0;
  input clk;
  wire clk;
  output \clk$1 ;
  wire \clk$1 ;
  output clk90;
  wire clk90;
  reg [7:0] clk_reg = 8'hf0;
  reg [7:0] \clk_reg$next ;
  input rst;
  wire rst;
  output stb;
  wire stb;
  reg [7:0] stb_reg = 8'h01;
  reg [7:0] \stb_reg$next ;
  always @(posedge clk, posedge rst)
    if (rst) clk_reg <= 8'hf0;
    else clk_reg <= \clk_reg$next ;
  always @(posedge clk, posedge rst)
    if (rst) stb_reg <= 8'h01;
    else stb_reg <= \stb_reg$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$3 ) begin end
    \clk_reg$next  = { clk_reg[6:0], clk_reg[7] };
    casez (rst)
      1'h1:
          \clk_reg$next  = 8'hf0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$3 ) begin end
    \stb_reg$next  = { stb_reg[6:0], stb_reg[7] };
    casez (rst)
      1'h1:
          \stb_reg$next  = 8'h01;
    endcase
  end
  assign stb = stb_reg[0];
  assign clk90 = clk_reg[2];
  assign \clk$1  = clk_reg[0];
endmodule
