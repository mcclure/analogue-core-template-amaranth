/* Generated by Amaranth Yosys 0.25 (PyPI ver 0.25.0.0.post75, git sha1 e02b7f64b) */

module amaranth_core(audio_clk, audio_dac, audio_sync, clk, cont1_joy, cont1_key, cont1_trig, cont2_joy, cont2_key, cont2_trig, cont3_joy, cont3_key, cont3_trig, cont4_joy, cont4_key, cont4_trig, dbg_rx, dbg_tx, init_done, rst, user1
, user2, video_de, video_hs, video_rgb, video_rgb_clk, video_rgb_clk90, video_skip, video_vs, audio_adc);
  reg \$auto$verilog_backend.cc:2083:dump_module$1  = 0;
  wire \$101 ;
  wire [23:0] \$103 ;
  wire [23:0] \$105 ;
  wire [10:0] \$11 ;
  wire [10:0] \$13 ;
  wire [8:0] \$14 ;
  wire \$17 ;
  wire [2:0] \$19 ;
  wire [2:0] \$20 ;
  wire \$22 ;
  wire [1:0] \$23 ;
  wire [1:0] \$25 ;
  wire \$28 ;
  wire \$3 ;
  wire \$30 ;
  wire \$32 ;
  wire \$34 ;
  wire \$36 ;
  wire \$38 ;
  wire [10:0] \$40 ;
  wire [10:0] \$41 ;
  wire \$43 ;
  wire \$45 ;
  wire [10:0] \$47 ;
  wire [10:0] \$48 ;
  wire \$5 ;
  wire \$50 ;
  wire \$52 ;
  wire \$54 ;
  wire [6:0] \$56 ;
  wire [6:0] \$57 ;
  wire \$59 ;
  wire \$61 ;
  wire \$63 ;
  wire [2:0] \$65 ;
  wire [2:0] \$66 ;
  wire \$68 ;
  wire \$7 ;
  wire \$70 ;
  wire \$72 ;
  wire \$74 ;
  wire [2:0] \$76 ;
  wire [2:0] \$77 ;
  wire \$79 ;
  wire \$81 ;
  wire \$83 ;
  wire \$85 ;
  wire \$87 ;
  wire \$89 ;
  wire \$9 ;
  wire \$91 ;
  wire \$93 ;
  wire \$95 ;
  wire \$97 ;
  wire \$99 ;
  reg [5:0] animation_counter = 6'h00;
  reg [5:0] \animation_counter$next ;
  input audio_adc;
  wire audio_adc;
  input audio_clk;
  wire audio_clk;
  input audio_dac;
  wire audio_dac;
  input audio_sync;
  wire audio_sync;
  wire boot_clk;
  input clk;
  wire clk;
  wire \clk$1 ;
  input [31:0] cont1_joy;
  wire [31:0] cont1_joy;
  input [31:0] cont1_key;
  wire [31:0] cont1_key;
  input [15:0] cont1_trig;
  wire [15:0] cont1_trig;
  input [31:0] cont2_joy;
  wire [31:0] cont2_joy;
  input [31:0] cont2_key;
  wire [31:0] cont2_key;
  input [15:0] cont2_trig;
  wire [15:0] cont2_trig;
  input [31:0] cont3_joy;
  wire [31:0] cont3_joy;
  input [31:0] cont3_key;
  wire [31:0] cont3_key;
  input [15:0] cont3_trig;
  wire [15:0] cont3_trig;
  input [31:0] cont4_joy;
  wire [31:0] cont4_joy;
  input [31:0] cont4_key;
  wire [31:0] cont4_key;
  input [15:0] cont4_trig;
  wire [15:0] cont4_trig;
  wire [1:0] current_color_id;
  reg current_flash_on;
  input dbg_rx;
  wire dbg_rx;
  input dbg_tx;
  wire dbg_tx;
  reg [23:0] flash_color;
  output init_done;
  reg init_done = 1'h0;
  wire \init_done$next ;
  wire [1:0] next_color_id;
  reg next_flash_on;
  reg [2:0] render_state;
  reg [1:0] rotate1_counter = 2'h0;
  reg [1:0] \rotate1_counter$next ;
  reg [1:0] rotate2_counter = 2'h0;
  reg [1:0] \rotate2_counter$next ;
  input rst;
  wire rst;
  wire \rst$2 ;
  input user1;
  wire user1;
  input user2;
  wire user2;
  wire video_clk_div_clk;
  wire video_clk_div_clk90;
  wire video_clk_div_stb;
  output video_de;
  reg video_de = 1'h0;
  reg \video_de$next ;
  output video_hs;
  reg video_hs = 1'h0;
  reg \video_hs$next ;
  output [23:0] video_rgb;
  reg [23:0] video_rgb = 24'h000000;
  reg [23:0] \video_rgb$next ;
  output video_rgb_clk;
  wire video_rgb_clk;
  output video_rgb_clk90;
  wire video_rgb_clk90;
  input video_skip;
  wire video_skip;
  output video_vs;
  reg video_vs = 1'h0;
  reg \video_vs$next ;
  reg [9:0] x_count = 10'h000;
  reg [9:0] \x_count$next ;
  reg [9:0] y_count = 10'h000;
  reg [9:0] \y_count$next ;
  assign \$9  = x_count == 9'h193;
  assign \$99  = y_count < 9'h15d;
  assign \$101  = \$97  & \$99 ;
  assign \$103  = flash_color ^ 1'h0;
  assign \$105  = flash_color ^ 24'hffffff;
  always @(posedge boot_clk)
    init_done <= 1'h1;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_vs <= 1'h0;
    else video_vs <= \video_vs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_hs <= 1'h0;
    else video_hs <= \video_hs$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) x_count <= 10'h000;
    else x_count <= \x_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) y_count <= 10'h000;
    else y_count <= \y_count$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) animation_counter <= 6'h00;
    else animation_counter <= \animation_counter$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) rotate1_counter <= 2'h0;
    else rotate1_counter <= \rotate1_counter$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) rotate2_counter <= 2'h0;
    else rotate2_counter <= \rotate2_counter$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_de <= 1'h0;
    else video_de <= \video_de$next ;
  always @(posedge \clk$1 , posedge \rst$2 )
    if (\rst$2 ) video_rgb <= 24'h000000;
    else video_rgb <= \video_rgb$next ;
  assign \$11  = y_count - 5'h1d;
  assign \$14  = animation_counter * 3'h5;
  assign \$13  = + \$14 ;
  assign \$17  = $signed(\$11 ) > $signed(\$13 );
  assign \$20  = rotate1_counter + 1'h1;
  assign \$23  = rotate1_counter[1] + 1'h1;
  assign \$25  = \$23  ^ rotate2_counter[1];
  assign \$22  = | \$25 ;
  assign \$28  = x_count[0] ^ y_count[0];
  assign \$30  = x_count[0] ^ y_count[0];
  assign \$32  = ! x_count;
  assign \$34  = ! y_count;
  assign \$36  = \$32  & \$34 ;
  assign \$38  = x_count == 2'h3;
  assign \$3  = y_count == 5'h1d;
  assign \$41  = x_count + 1'h1;
  assign \$43  = x_count == 9'h197;
  assign \$45  = x_count == 9'h197;
  assign \$48  = y_count + 1'h1;
  assign \$50  = y_count == 9'h17a;
  assign \$52  = x_count == 9'h197;
  assign \$54  = y_count == 9'h17a;
  assign \$57  = animation_counter + 1'h1;
  assign \$5  = y_count == 9'h15c;
  assign \$59  = x_count == 9'h197;
  assign \$61  = y_count == 9'h17a;
  assign \$63  = animation_counter == 6'h3f;
  assign \$66  = rotate1_counter + 1'h1;
  assign \$68  = x_count == 9'h197;
  assign \$70  = y_count == 9'h17a;
  assign \$72  = animation_counter == 6'h3f;
  assign \$74  = rotate1_counter == 2'h3;
  assign \$77  = rotate2_counter + 1'h1;
  assign \$7  = x_count == 3'h4;
  assign \$79  = x_count >= 3'h4;
  assign \$81  = x_count < 9'h194;
  assign \$83  = \$79  & \$81 ;
  assign \$85  = y_count >= 5'h1d;
  assign \$87  = y_count < 9'h15d;
  assign \$89  = \$85  & \$87 ;
  assign \$91  = x_count >= 3'h4;
  assign \$93  = x_count < 9'h194;
  assign \$95  = \$91  & \$93 ;
  assign \$97  = y_count >= 5'h1d;
  \amaranth_core.video_clk_div  video_clk_div (
    .clk(\clk$1 ),
    .\clk$1 (video_clk_div_clk),
    .clk90(video_clk_div_clk90),
    .rst(\rst$2 ),
    .stb(video_clk_div_stb)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (current_color_id)
      2'h0:
          current_flash_on = 1'h0;
      2'h1:
          current_flash_on = x_count[0];
      2'h2:
          current_flash_on = y_count[0];
      2'h3:
          current_flash_on = \$28 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (next_color_id)
      2'h0:
          next_flash_on = 1'h0;
      2'h1:
          next_flash_on = x_count[0];
      2'h2:
          next_flash_on = y_count[0];
      2'h3:
          next_flash_on = \$30 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_vs$next  = video_vs;
    casez (video_clk_div_stb)
      1'h1:
          \video_vs$next  = \$36 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_vs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_hs$next  = video_hs;
    casez (video_clk_div_stb)
      1'h1:
          \video_hs$next  = \$38 ;
    endcase
    casez (\rst$2 )
      1'h1:
          \video_hs$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \x_count$next  = x_count;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \x_count$next  = \$41 [9:0];
          casez (\$43 )
            1'h1:
                \x_count$next  = 10'h000;
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \x_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \y_count$next  = y_count;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$45 )
            1'h1:
              begin
                \y_count$next  = \$48 [9:0];
                casez (\$50 )
                  1'h1:
                      \y_count$next  = 10'h000;
                endcase
              end
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \y_count$next  = 10'h000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \animation_counter$next  = animation_counter;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$52 )
            1'h1:
                casez (\$54 )
                  1'h1:
                      \animation_counter$next  = \$57 [5:0];
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \animation_counter$next  = 6'h00;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \rotate1_counter$next  = rotate1_counter;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$59 )
            1'h1:
                casez (\$61 )
                  1'h1:
                      casez (\$63 )
                        1'h1:
                            \rotate1_counter$next  = \$66 [1:0];
                      endcase
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \rotate1_counter$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \rotate2_counter$next  = rotate2_counter;
    casez (video_clk_div_stb)
      1'h1:
          casez (\$68 )
            1'h1:
                casez (\$70 )
                  1'h1:
                      casez (\$72 )
                        1'h1:
                            casez (\$74 )
                              1'h1:
                                  \rotate2_counter$next  = \$77 [1:0];
                            endcase
                      endcase
                endcase
          endcase
    endcase
    casez (\rst$2 )
      1'h1:
          \rotate2_counter$next  = 2'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_de$next  = video_de;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \video_de$next  = 1'h0;
          casez (\$83 )
            1'h1:
                casez (\$89 )
                  1'h1:
                      \video_de$next  = 1'h1;
                endcase
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_de$next  = 1'h0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    \video_rgb$next  = video_rgb;
    casez (video_clk_div_stb)
      1'h1:
        begin
          \video_rgb$next  = 24'h000000;
          casez (\$95 )
            1'h1:
                casez (\$101 )
                  1'h1:
                      casez (render_state)
                        3'h0:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'h00;
                            \video_rgb$next [7:0] = 8'hff;
                          end
                        3'h2:
                          begin
                            \video_rgb$next [23:16] = 8'hff;
                            \video_rgb$next [15:8] = 8'hff;
                            \video_rgb$next [7:0] = 8'h80;
                          end
                        3'h1:
                          begin
                            \video_rgb$next [23:16] = 8'h00;
                            \video_rgb$next [15:8] = 8'hff;
                            \video_rgb$next [7:0] = 8'h00;
                          end
                        3'h4:
                            (* full_case = 32'd1 *)
                            casez (current_flash_on)
                              1'h1:
                                  \video_rgb$next  = \$103 ;
                              default:
                                begin
                                  \video_rgb$next [23:16] = 8'ha0;
                                  \video_rgb$next [15:8] = 8'h00;
                                  \video_rgb$next [7:0] = 8'h80;
                                end
                            endcase
                        3'h5:
                            (* full_case = 32'd1 *)
                            casez (next_flash_on)
                              1'h1:
                                  \video_rgb$next  = \$105 ;
                              default:
                                begin
                                  \video_rgb$next [23:16] = 8'ha0;
                                  \video_rgb$next [15:8] = 8'h00;
                                  \video_rgb$next [7:0] = 8'h80;
                                end
                            endcase
                      endcase
                endcase
          endcase
        end
    endcase
    casez (\rst$2 )
      1'h1:
          \video_rgb$next  = 24'h000000;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez ({ \$17 , \$9 , \$7 , \$5 , \$3  })
      5'b????1:
          render_state = 3'h0;
      5'b???1?:
          render_state = 3'h2;
      5'b??1??:
          render_state = 3'h1;
      5'b?1???:
          render_state = 3'h3;
      5'h1?:
          render_state = 3'h5;
      default:
          render_state = 3'h4;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (\$22 )
      1'h1:
          flash_color = 24'h000000;
      default:
          flash_color = 24'hffffff;
    endcase
  end
  assign \$19  = \$20 ;
  assign \$40  = \$41 ;
  assign \$47  = \$48 ;
  assign \$56  = \$57 ;
  assign \$65  = \$66 ;
  assign \$76  = \$77 ;
  assign next_color_id = rotate1_counter;
  assign current_color_id = \$20 [1:0];
  assign video_rgb_clk90 = video_clk_div_clk90;
  assign video_rgb_clk = video_clk_div_clk;
  assign \init_done$next  = 1'h1;
  assign \rst$2  = rst;
  assign \clk$1  = clk;
  assign boot_clk = clk;
endmodule

module \amaranth_core.video_clk_div (rst, \clk$1 , clk90, stb, clk);
  reg \$auto$verilog_backend.cc:2083:dump_module$2  = 0;
  input clk;
  wire clk;
  output \clk$1 ;
  wire \clk$1 ;
  output clk90;
  wire clk90;
  reg [7:0] clk_reg = 8'hf0;
  reg [7:0] \clk_reg$next ;
  input rst;
  wire rst;
  output stb;
  wire stb;
  reg [7:0] stb_reg = 8'h01;
  reg [7:0] \stb_reg$next ;
  always @(posedge clk, posedge rst)
    if (rst) clk_reg <= 8'hf0;
    else clk_reg <= \clk_reg$next ;
  always @(posedge clk, posedge rst)
    if (rst) stb_reg <= 8'h01;
    else stb_reg <= \stb_reg$next ;
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \clk_reg$next  = { clk_reg[6:0], clk_reg[7] };
    casez (rst)
      1'h1:
          \clk_reg$next  = 8'hf0;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2083:dump_module$2 ) begin end
    \stb_reg$next  = { stb_reg[6:0], stb_reg[7] };
    casez (rst)
      1'h1:
          \stb_reg$next  = 8'h01;
    endcase
  end
  assign stb = stb_reg[0];
  assign clk90 = clk_reg[1];
  assign \clk$1  = clk_reg[7];
endmodule
